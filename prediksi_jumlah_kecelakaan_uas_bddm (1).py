# -*- coding: utf-8 -*-
"""Prediksi Jumlah Kecelakaan UAS BDDM

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12O5G-6VR1pv4FhEHlX85SYhRTp_K2FRj
"""

!pip install tensorflow==2.18

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.optimizers import Adam

# Step 1: Load and Preprocess Data
file_path = '/content/monroe county car crach 2003-2015.csv'
data = pd.read_csv(file_path, encoding='latin1')
data

"""# Prepocessing Data"""

# Cek missing values
print("Missing Values:")
print(data.isnull().sum())

# Hapus baris dengan missing values dan simpan hasilnya
data = data.dropna().reset_index(drop=True)

# Cek kembali apakah missing values sudah dihapus
print("Jumlah missing values pada dataset setelah pembersihan:")
print(data.isnull().sum())

# Tampilkan jumlah data setelah pembersihan
print(f"Jumlah baris setelah pembersihan: {len(data)}")

data

# Gabungkan data berdasarkan bulan
data['Waktu'] = pd.to_datetime(data[['Year', 'Month', 'Day']])
monthly_data = data.groupby(data['Waktu'].dt.to_period('M')).size().reset_index(name='Jumlah_Kecelakaan')
monthly_data['Waktu'] = monthly_data['Waktu'].dt.to_timestamp()

# Plot data
plt.figure(figsize=(12, 6))
plt.plot(monthly_data['Waktu'], monthly_data['Jumlah_Kecelakaan'])
plt.title('Jumlah Kecelakaan Bulanan')
plt.xlabel('Waktu')
plt.ylabel('Jumlah Kecelakaan')
plt.show()

# Normalisasi data
scaler = MinMaxScaler()
monthly_data['Jumlah_Kecelakaan_Dinormalisasi'] = scaler.fit_transform(monthly_data[['Jumlah_Kecelakaan']])

# Tambahkan fitur bulan sebelumnya
monthly_data['Lag_1'] = monthly_data['Jumlah_Kecelakaan_Dinormalisasi'].shift(1)
monthly_data.dropna(inplace=True)

"""# Modeling LSTM"""

# Membuat data sekuensial untuk LSTM
sequence_length = 12
X, y = [], []
data_values = monthly_data['Jumlah_Kecelakaan_Dinormalisasi'].values
for i in range(len(data_values) - sequence_length):
    X.append(data_values[i:i + sequence_length])
    y.append(data_values[i + sequence_length])
X, y = np.array(X), np.array(y)

# Membagi data menjadi training dan testing
split = int(0.8 * len(X))
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

# Reshape untuk LSTM
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

#Bangun dan Latih Model LSTM
model = Sequential([
    LSTM(64, activation='relu', input_shape=(sequence_length, 1), return_sequences=True),
    Dropout(0.2),
    LSTM(32, activation='relu'),
    Dense(1)
])
model.compile(optimizer=Adam(learning_rate=0.001), loss='mse')

#Latih model yang dioptimalkan
history = model.fit(
    X_train, y_train,
    epochs=50,
    batch_size=16,
    validation_data=(X_test, y_test),
    verbose=1
)

"""# Model Evaluasi"""

# Evaluasi Kinerja Model
# Prediksi pada data uji
y_pred = model.predict(X_test)
y_pred_rescaled = scaler.inverse_transform(y_pred)
y_test_rescaled = scaler.inverse_transform(y_test.reshape(-1, 1))

# Metrik evaluasi
rmse = np.sqrt(mean_squared_error(y_test_rescaled, y_pred_rescaled))
mape = mean_absolute_percentage_error(y_test_rescaled, y_pred_rescaled)

print(f"RMSE: {rmse}")
print(f"MAPE: {mape * 100:.2f}%")

#Memprediksi Nilai Masa Depan
future_months = 32  # Jumlah bulan ke depan yang ingin diprediksi
last_sequence = data_values[-sequence_length:].tolist()  # Ambil sekuens terakhir dari data
future_predictions = []

for _ in range(future_months):
    input_sequence = np.array(last_sequence[-sequence_length:]).reshape(1, sequence_length, 1)
    next_prediction = model.predict(input_sequence, verbose=0)[0, 0]
    future_predictions.append(next_prediction)
    last_sequence.append(next_prediction)

# Konversi prediksi ke skala aslinya
future_predictions_rescaled = scaler.inverse_transform(np.array(future_predictions).reshape(-1, 1))

#Hasilkan Tanggal Mendatang dan Visualisasikan
last_date = monthly_data['Waktu'].iloc[-1]
future_dates = pd.date_range(start=last_date + pd.offsets.MonthBegin(), periods=future_months, freq='MS')

# Buat DataFrame untuk hasil prediksi
future_data = pd.DataFrame({
    'Waktu': future_dates,
    'Prediksi_Jumlah_Kecelakaan': future_predictions_rescaled.flatten()
})

"""# VISUALISASI PREDIKSI"""

# Visualisasi hasil
plt.figure(figsize=(12, 6))
plt.plot(monthly_data['Waktu'], monthly_data['Jumlah_Kecelakaan'], label='Histori Data')
plt.plot(future_data['Waktu'], future_data['Prediksi_Jumlah_Kecelakaan'], label='Prediksi', linestyle='--')
plt.title('Jumlah Kecelakaan: Prediksi Historis dan Masa Depan')
plt.xlabel('Waktu')
plt.ylabel('Jumlah Kecelakaan')
plt.legend()
plt.xticks(rotation=45)
plt.show()

# Tampilkan hasil prediksi
print(future_data)

"""# Menyimpan Model"""

from tensorflow.keras.models import load_model

# Simpan model ke file
model_save_path = 'lstm_model_prediksi_kecelakaan.h5'
model.save(model_save_path)
print(f"Model telah disimpan ke {model_save_path}")

import joblib

# Simpan scaler
scaler_save_path = 'scaler_prediksi_kecelakaan.pkl'
joblib.dump(scaler, scaler_save_path)
print(f"Scaler telah disimpan ke {scaler_save_path}")

# Memuat scaler
scaler = joblib.load(scaler_save_path)
print("Scaler berhasil dimuat.")